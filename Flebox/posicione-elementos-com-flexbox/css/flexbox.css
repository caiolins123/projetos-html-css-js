.cabecalhoPrincipal .container{
    display: flex;
    align-items: center;
    justify-content: space-between;
}

.cabecalhoPrincipal-nav{
    display: flex;
}

.rodapePrincipal-patrocinadores .container{
    display: flex;
    justify-content: space-between;
}

.rodapePrincipal-patrocinadores-list{
    display: flex;
    align-items: center;
    justify-content: space-around; /* nesse caso ao invés de colocar todo o espaçamento num lado só
    dos elementos (no caso o direito), ele distribui esse espaçamento na esquerda e na direita */
    width: 70%;
    margin-right: 5%;
}

.rodapePrincipal-contatoForm{
    width: 25%;
}

.rodapePrincipal-contatoForm-fieldset{
    display: flex;
}

.rodapePrincipal-navMap-list{
    display: flex;
    /*flex-direction: column;
    flex-wrap: wrap;*/
    height: 250px;
    flex-flow: column wrap; /* A propriedade flex-flow reune a propriedade flex-direction e flex-wrap
    numa única função */;
}

.conteudoPrincipal-cursos{
    display: flex;
    flex-wrap: wrap;
}

.conteudoPrincipal-cursos-link{
    width: 23%;
    margin-bottom: 1%;
}

.conteudoPrincipal-cursos-link:nth-child(4n){ /* essa função seta todos os filhos dessa classe que 
    são multiplos de 4 e colocam uma característica especifica pra eles, se fosse por 2 seria 2n,
    por 3 seris 3n etc...*/
    margin-right: 0;
}
.conteudoPrincipal-cursos-link:nth-child(4n+1){ /* essa função seta todos os filhos dessa classe que 
    são multiplos de 4 e somam mais um, ou seja pega os elementos que veem em seguida dele e atribuem
    uma caracterítica especifica a ele.*/
    margin-left: 0;
}

.videoSobre .container{
    display: flex;
}

.videoSobre-sobre{
    text-align: center;
    display: flex;
    flex-direction: column;
    flex-grow: 2; /* a propriedade flex-grow selecione o item em que estamos mexendo dentro do flex
    e diz para ele ocupar todo o espaço restante dentro do flex para si, crescendo assim o seu tamanho
    ou diminuindo dependendo da situação (os valores dessa proprieda variam de 0 a infinito, onde 
    com 1 você diz para ele ocupar o espaço em branco e 0 para não ocupar e com outros números, você
    seleciona quantas metades do espaço em branco você quer que o elemento ocupe, por exemplo 2, se
    dois elementos tiverem "disputando o mesmo espaço em branco" e você coloca flex-grow: 2; e 
    flex-grow: 1; para o outro você está dizendo que numa divisão do espaço em branco em 3 partes
    um ocuparia 2/3 e o outro 1/3 deste espaço.) */
}

.videoSobre-sobre-list{
    flex-grow: 1; /* neste caso eu uso o flex-grow com a mesma finalidade, pegar todo o espaço em branco
    e jogar dentro de um elemento que no caso seria uma lista, só que nesse caso o espaço em branco 
    que estava disponivel era na vertical, e eu o ocupei para poder colocar o botao cadastre-se já
    na parte inferior do conteiner .videoSobre-sobre */
}

.videoSobre-video{
    flex-grow: 1;
    flex-shrink: 2; /* O flex-shrink é exatamente a mesma coisa que o grow só que em sentido oposto,
    onde o grow seria para aumentar os itens dependendo do espaço em branco disponível o shrink serve
    para dimunuí-los proporcionalmente de acordo com o quanto a tela ficar menor e menos espaço existir
    dentro da div pai que o ocupa (os valores possiveis a serem atribuidos a esta propriedade sao os 
    mesmo que o grow, ou seja, de 0 a infito, e por exemplo se voce colocar 2 voce diz que esse 
    elemento diminuíra 2 vezes mais do que os outros presente na div pai que o possui) */;
}


/* Parte mobile */
@media screen and (max-width: 768px){

    .cabecalhoPrincipal-nav{
        flex-direction: column;
    }

    .cabecalhoPrincipal .container{
        flex-direction: column; /* quando eu altero a direção de um flex de row para column tudo que 
        antes era feito para estilizar a linha tem seu objtivo modificado, por exemplo, o align-items
        em row servia para alinhar os itens verticalmente, em column ele serve pra alinhas os itens 
        horizontalmente ao centro da página. Num outro exemplo o justify-content: space-betwen servia
        para jogar um elemento pra cada lado e dar um espaçamento entre eles, no column ele faz exatamente
        a mesma coisa só que no eixo vertical, justamente porque quando você altera a direção do flex você
        altera oq algumas propriedades fazer, porque no flex column o eixo principal é o vertical e no 
        flex row o eixo principal é o horizontal. */
        align-items: initial;
        text-align: center;
    }

    .conteudoPrincipal-cursos-link{
        width: 100%;
    }

    .conteudoPrincipal-cursos{
        flex-direction: column;
    }

    .rodapePrincipal-navMap-list{
        height: auto;
    }

    .rodapePrincipal-patrocinadores .container{
        flex-direction: column;
        align-items: center;
    }

    .rodapePrincipal-patrocinadores-list{
        margin: 0;
        width: 100%;
    }

    .rodapePrincipal-contatoForm{
        width: 100%;
    }

    .rodapePrincipal-contatoForm-fieldset{
        justify-content: center;
    }

    .cabecalhoPrincipal-nav-link-app{
        order: 0;
    }

    .videoSobre .container{
        flex-direction: column;
    }

    .videoSobre-video{
        margin: 0 auto;
    }

}